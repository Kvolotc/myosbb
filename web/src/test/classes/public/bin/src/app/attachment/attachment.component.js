System.register(["@angular/core", "@angular/common", "rxjs/Rx", "ng2-bootstrap/ng2-bootstrap", "ng2-file-upload/ng2-file-upload", "ng2-translate/ng2-translate", "../../shared/services/api.service", "../../shared/pipes/capitalize-first-letter", "../../shared/services/file.location.path", "../admin/components/attachment/attachment.service"], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1, common_1, ng2_bootstrap_1, ng2_file_upload_1, ng2_translate_1, ApiService, capitalize_first_letter_1, FileLocationPath, attachment_service_1;
    var attachmentUploadUrl, fileUploadPath, fileDownloadPath, AttachmentComponent;
    return {
        setters:[
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
            },
            function (_1) {},
            function (ng2_bootstrap_1_1) {
                ng2_bootstrap_1 = ng2_bootstrap_1_1;
            },
            function (ng2_file_upload_1_1) {
                ng2_file_upload_1 = ng2_file_upload_1_1;
            },
            function (ng2_translate_1_1) {
                ng2_translate_1 = ng2_translate_1_1;
            },
            function (ApiService_1) {
                ApiService = ApiService_1;
            },
            function (capitalize_first_letter_1_1) {
                capitalize_first_letter_1 = capitalize_first_letter_1_1;
            },
            function (FileLocationPath_1) {
                FileLocationPath = FileLocationPath_1;
            },
            function (attachment_service_1_1) {
                attachment_service_1 = attachment_service_1_1;
            }],
        execute: function() {
            attachmentUploadUrl = ApiService.serverUrl + '/restful/attachment/';
            fileUploadPath = FileLocationPath.fileUploadPath;
            fileDownloadPath = FileLocationPath.fileDownloadPath;
            AttachmentComponent = (function () {
                function AttachmentComponent(_attachmentService) {
                    this._attachmentService = _attachmentService;
                    this.uploader = new ng2_file_upload_1.FileUploader({ url: attachmentUploadUrl, authToken: 'Bearer '
                            + localStorage.getItem('access_token') });
                    this.hasDropZoneOver = false;
                    this.attachments = [];
                    this.disabledLogoBtn = true;
                    this.enableLogoBtn = false;
                    this.attachmentChanged = new core_1.EventEmitter();
                    this.logoChanged = new core_1.EventEmitter();
                }
                AttachmentComponent.prototype.fileOverBase = function (e) {
                    this.hasDropZoneOver = e;
                };
                AttachmentComponent.prototype.transform = function (bytes) {
                    if (bytes == 0)
                        return '0 Bytes';
                    var k = 1000;
                    var sizes = ['Bytes', 'KB', 'MB', 'GB'];
                    var i = Math.floor(Math.log(bytes) / Math.log(k));
                    return (bytes / Math.pow(k, i)).toFixed(1) + ' ' + sizes[i];
                };
                AttachmentComponent.prototype.onUpload = function () {
                    var _this = this;
                    console.log("uploading...");
                    console.log("logo", this.enableLogoBtn);
                    var count = this.uploader.queue.length;
                    this.uploader.uploadAll();
                    this.disabledLogoBtn = false;
                    this._attachmentService.findLast(count).subscribe(function (data) {
                        _this.attachments = data;
                        console.log("attachments ", _this.attachments);
                        _this.attachmentChanged.emit(_this.attachments);
                    }, function (err) {
                        console.log(err);
                    });
                };
                AttachmentComponent.prototype.onLogoChanged = function (filename) {
                    console.log(fileUploadPath + filename);
                    this.logoChanged.emit(fileUploadPath + filename);
                };
                AttachmentComponent.prototype.onCancel = function () {
                    console.log("cancelling");
                    this.uploader.cancelAll();
                };
                AttachmentComponent.prototype.onRemove = function () {
                    console.log("removing");
                    this.uploader.clearQueue();
                };
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', Boolean)
                ], AttachmentComponent.prototype, "enableLogoBtn", void 0);
                __decorate([
                    core_1.Output(), 
                    __metadata('design:type', core_1.EventEmitter)
                ], AttachmentComponent.prototype, "attachmentChanged", void 0);
                __decorate([
                    core_1.Output(), 
                    __metadata('design:type', core_1.EventEmitter)
                ], AttachmentComponent.prototype, "logoChanged", void 0);
                AttachmentComponent = __decorate([
                    core_1.Component({
                        selector: 'myosbb-attachment',
                        template: "\n<div class=\"row\">\n                                <div class=\"col-md-3\">\n                                    <p>{{ 'selectFiles' | translate | capitalize }}</p>\n                                    <input type=\"file\" ng2FileSelect [uploader]=\"uploader\" multiple  /><br/>\n                                    <div ng2FileDrop\n                                         [ngClass]=\"{'nv-file-over': hasDropZoneOver}\"\n                                         (fileOver)=\"fileOverBase($event)\"\n                                         [uploader]=\"uploader\"\n                                         class=\"well my-drop-zone\">\n                                        {{ 'dropZone' | translate | capitalize }}\n                                    </div>\n                                </div>\n\n                                <div class=\"col-md-9\" style=\"margin-bottom: 40px\">\n                                    <table class=\"table\">\n                                        <thead>\n                                        <tr>\n                                            <th width=\"30%\">{{ 'name' | translate | capitalize }}</th>\n                                            <th>{{ 'size' | translate | capitalize }}</th>\n                                            <th>{{ 'status' | translate | capitalize }}</th>\n                                            <th width=\"40%\">{{ 'actions' | translate | capitalize }}</th>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        <tr *ngFor=\"let item of uploader.queue\">\n                                            <td><strong>{{ item.file.name }}</strong></td>\n                                            <td nowrap>{{ transform(item.file.size) }}</td>\n                                            <td class=\"text-center\">\n                                                <span *ngIf=\"item.isSuccess\"><i class=\"glyphicon glyphicon-ok\"></i></span>\n                                                <span *ngIf=\"item.isCancel\"><i class=\"glyphicon glyphicon-ban-circle\"></i></span>\n                                                <span *ngIf=\"item.isError\"><i class=\"glyphicon glyphicon-remove\"></i></span>\n                                            </td>\n                                            <td nowrap>\n                                                <button type=\"button\" class=\"btn btn-success btn-xs\"\n                                                        (click)=\"onUpload()\" [disabled]=\"item.isReady || item.isUploading || item.isSuccess\">\n                                                    <span class=\"glyphicon glyphicon-upload\"></span> {{ 'upload' | translate | capitalize }}\n                                                </button>\n                                                <button type=\"button\" class=\"btn btn-danger btn-xs\"\n                                                        (click)=\"onRemove()\">\n                                                    <span class=\"glyphicon glyphicon-trash\"></span> {{ 'remove' | translate | capitalize }}\n                                                </button>\n                                                 <button  *ngIf=\"enableLogoBtn\" [disabled]=\"disabledLogoBtn\" type=\"button\" class=\"btn btn-warning btn-xs\"\n                                                                                    (click)=\"onLogoChanged(item.file.name)\">\n                                                                                <span class=\"glyphicon glyphicon-camera\"></span> Logo\n                                                 </button>\n                                            </td>\n                                        </tr>\n                                        </tbody>\n                                    </table>\n\n                                    <div>\n                                        <div>\n                                            {{ 'progress' | translate | capitalize }}:\n                                            <div class=\"progress\" style=\"\">\n                                                <div class=\"progress-bar\" role=\"progressbar\" [ngStyle]=\"{ 'width': uploader.progress + '%' }\"></div>\n                                            </div>\n                                        </div>\n                                        <button type=\"button\" class=\"btn btn-success btn-s\"\n                                                (click)=\"onUpload()\" [disabled]=\"!uploader.getNotUploadedItems().length\">\n                                            <span class=\"glyphicon glyphicon-upload\"></span> {{ 'upload' | translate | capitalize }} {{ 'all' | translate }}\n                                        </button>\n                                        <button type=\"button\" class=\"btn btn-warning btn-s\"\n                                                (click)=\"onCancel()\" [disabled]=\"!uploader.isUploading\">\n                                            <span class=\"glyphicon glyphicon-ban-circle\"></span> {{ 'cancel' | translate | capitalize }} {{ 'all' | translate }}\n                                        </button>\n                                        <button type=\"button\" class=\"btn btn-danger btn-s\"\n                                                (click)=\"onRemove()\" [disabled]=\"!uploader.queue.length\">\n                                            <span class=\"glyphicon glyphicon-trash\"></span> {{ 'remove' | translate | capitalize }} {{ 'all' | translate }}\n                                        </button>\n                                    </div>\n                                </div>\n\n                            </div>",
                        pipes: [ng2_translate_1.TranslatePipe, capitalize_first_letter_1.CapitalizeFirstLetterPipe],
                        providers: [attachment_service_1.AttachmentService],
                        directives: [ng2_bootstrap_1.MODAL_DIRECTIVES, common_1.CORE_DIRECTIVES, ng2_file_upload_1.FileSelectDirective, ng2_file_upload_1.FileDropDirective],
                        viewProviders: [ng2_bootstrap_1.BS_VIEW_PROVIDERS]
                    }), 
                    __metadata('design:paramtypes', [attachment_service_1.AttachmentService])
                ], AttachmentComponent);
                return AttachmentComponent;
            }());
            exports_1("AttachmentComponent", AttachmentComponent);
        }
    }
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9hdHRhY2htZW50L2F0dGFjaG1lbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7UUFZTSxtQkFBbUIsRUFDbkIsY0FBYyxFQUNkLGdCQUFnQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7WUFGaEIsbUJBQW1CLEdBQUcsVUFBVSxDQUFDLFNBQVMsR0FBRyxzQkFBc0IsQ0FBQztZQUNwRSxjQUFjLEdBQUcsZ0JBQWdCLENBQUMsY0FBYyxDQUFDO1lBQ2pELGdCQUFnQixHQUFHLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDO1lBbUYzRDtnQkFnQkksNkJBQW9CLGtCQUFvQztvQkFBcEMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFrQjtvQkFkakQsYUFBUSxHQUFnQixJQUFJLDhCQUFZLENBQUMsRUFBQyxHQUFHLEVBQUUsbUJBQW1CLEVBQUUsU0FBUyxFQUFFLFNBQVM7OEJBQzdDLFlBQVksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEVBQUMsQ0FBQyxDQUFDO29CQUNsRixvQkFBZSxHQUFXLEtBQUssQ0FBQztvQkFLL0IsZ0JBQVcsR0FBZ0IsRUFBRSxDQUFDO29CQUM5QixvQkFBZSxHQUFHLElBQUksQ0FBQztvQkFDZCxrQkFBYSxHQUFZLEtBQUssQ0FBQztvQkFFdEMsc0JBQWlCLEdBQWdDLElBQUksbUJBQVksRUFBRSxDQUFDO29CQUNwRSxnQkFBVyxHQUEwQixJQUFJLG1CQUFZLEVBQUUsQ0FBQztnQkFHbEUsQ0FBQztnQkFaTSwwQ0FBWSxHQUFuQixVQUFvQixDQUFLO29CQUNyQixJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQztnQkFDN0IsQ0FBQztnQkFZRCx1Q0FBUyxHQUFULFVBQVUsS0FBSztvQkFDWCxFQUFFLENBQUEsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDO3dCQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7b0JBQ2hDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQztvQkFD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Y2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIsIFZpZXdDaGlsZCwgSW5wdXQsIE91dHB1dCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IENPUkVfRElSRUNUSVZFUyB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcclxuaW1wb3J0IFwicnhqcy9SeFwiO1xyXG5pbXBvcnQgeyBNT0RBTF9ESVJFQ1RJVkVTLCBCU19WSUVXX1BST1ZJREVSUywgTW9kYWxEaXJlY3RpdmUgfSBmcm9tIFwibmcyLWJvb3RzdHJhcC9uZzItYm9vdHN0cmFwXCI7XHJcbmltcG9ydCB7IEZpbGVTZWxlY3REaXJlY3RpdmUsIEZpbGVEcm9wRGlyZWN0aXZlLCBGaWxlVXBsb2FkZXIgfSBmcm9tIFwibmcyLWZpbGUtdXBsb2FkL25nMi1maWxlLXVwbG9hZFwiO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGVQaXBlIH0gZnJvbSBcIm5nMi10cmFuc2xhdGUvbmcyLXRyYW5zbGF0ZVwiO1xyXG5pbXBvcnQgQXBpU2VydmljZSA9IHJlcXVpcmUoXCIuLi8uLi9zaGFyZWQvc2VydmljZXMvYXBpLnNlcnZpY2VcIik7XHJcbmltcG9ydCB7IENhcGl0YWxpemVGaXJzdExldHRlclBpcGUgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL3BpcGVzL2NhcGl0YWxpemUtZmlyc3QtbGV0dGVyXCI7XHJcbmltcG9ydCBGaWxlTG9jYXRpb25QYXRoID0gcmVxdWlyZShcIi4uLy4uL3NoYXJlZC9zZXJ2aWNlcy9maWxlLmxvY2F0aW9uLnBhdGhcIik7XHJcbmltcG9ydCB7IEF0dGFjaG1lbnRTZXJ2aWNlIH0gZnJvbSBcIi4uL2FkbWluL2NvbXBvbmVudHMvYXR0YWNobWVudC9hdHRhY2htZW50LnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgQXR0YWNobWVudCB9IGZyb20gXCIuLi9hZG1pbi9jb21wb25lbnRzL2F0dGFjaG1lbnQvYXR0YWNobWVudC5pbnRlcmZhY2VcIjtcclxuXHJcbmNvbnN0IGF0dGFjaG1lbnRVcGxvYWRVcmwgPSBBcGlTZXJ2aWNlLnNlcnZlclVybCArICcvcmVzdGZ1bC9hdHRhY2htZW50Lyc7XHJcbmNvbnN0IGZpbGVVcGxvYWRQYXRoID0gRmlsZUxvY2F0aW9uUGF0aC5maWxlVXBsb2FkUGF0aDtcclxuY29uc3QgZmlsZURvd25sb2FkUGF0aCA9IEZpbGVMb2NhdGlvblBhdGguZmlsZURvd25sb2FkUGF0aDtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdteW9zYmItYXR0YWNobWVudCcsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG48ZGl2IGNsYXNzPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC0zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPnt7ICdzZWxlY3RGaWxlcycgfCB0cmFuc2xhdGUgfCBjYXBpdGFsaXplIH19PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImZpbGVcIiBuZzJGaWxlU2VsZWN0IFt1cGxvYWRlcl09XCJ1cGxvYWRlclwiIG11bHRpcGxlICAvPjxici8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgbmcyRmlsZURyb3BcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbbmdDbGFzc109XCJ7J252LWZpbGUtb3Zlcic6IGhhc0Ryb3Bab25lT3Zlcn1cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmaWxlT3Zlcik9XCJmaWxlT3ZlckJhc2UoJGV2ZW50KVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3VwbG9hZGVyXT1cInVwbG9hZGVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cIndlbGwgbXktZHJvcC16b25lXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyAnZHJvcFpvbmUnIHwgdHJhbnNsYXRlIHwgY2FwaXRhbGl6ZSB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC05XCIgc3R5bGU9XCJtYXJnaW4tYm90dG9tOiA0MHB4XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz1cInRhYmxlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHdpZHRoPVwiMzAlXCI+e3sgJ25hbWUnIHwgdHJhbnNsYXRlIHwgY2FwaXRhbGl6ZSB9fTwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPnt7ICdzaXplJyB8IHRyYW5zbGF0ZSB8IGNhcGl0YWxpemUgfX08L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD57eyAnc3RhdHVzJyB8IHRyYW5zbGF0ZSB8IGNhcGl0YWxpemUgfX08L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCB3aWR0aD1cIjQwJVwiPnt7ICdhY3Rpb25zJyB8IHRyYW5zbGF0ZSB8IGNhcGl0YWxpemUgfX08L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgKm5nRm9yPVwibGV0IGl0ZW0gb2YgdXBsb2FkZXIucXVldWVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHN0cm9uZz57eyBpdGVtLmZpbGUubmFtZSB9fTwvc3Ryb25nPjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIG5vd3JhcD57eyB0cmFuc2Zvcm0oaXRlbS5maWxlLnNpemUpIH19PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiAqbmdJZj1cIml0ZW0uaXNTdWNjZXNzXCI+PGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLW9rXCI+PC9pPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gKm5nSWY9XCJpdGVtLmlzQ2FuY2VsXCI+PGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWJhbi1jaXJjbGVcIj48L2k+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiAqbmdJZj1cIml0ZW0uaXNFcnJvclwiPjxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmVcIj48L2k+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIG5vd3JhcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXN1Y2Nlc3MgYnRuLXhzXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2xpY2spPVwib25VcGxvYWQoKVwiIFtkaXNhYmxlZF09XCJpdGVtLmlzUmVhZHkgfHwgaXRlbS5pc1VwbG9hZGluZyB8fCBpdGVtLmlzU3VjY2Vzc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXVwbG9hZFwiPjwvc3Bhbj4ge3sgJ3VwbG9hZCcgfCB0cmFuc2xhdGUgfCBjYXBpdGFsaXplIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIGJ0bi14c1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNsaWNrKT1cIm9uUmVtb3ZlKClcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10cmFzaFwiPjwvc3Bhbj4ge3sgJ3JlbW92ZScgfCB0cmFuc2xhdGUgfCBjYXBpdGFsaXplIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiAgKm5nSWY9XCJlbmFibGVMb2dvQnRuXCIgW2Rpc2FibGVkXT1cImRpc2FibGVkTG9nb0J0blwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4td2FybmluZyBidG4teHNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2xpY2spPVwib25Mb2dvQ2hhbmdlZChpdGVtLmZpbGUubmFtZSlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tY2FtZXJhXCI+PC9zcGFuPiBMb2dvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyAncHJvZ3Jlc3MnIHwgdHJhbnNsYXRlIHwgY2FwaXRhbGl6ZSB9fTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3NcIiBzdHlsZT1cIlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3MtYmFyXCIgcm9sZT1cInByb2dyZXNzYmFyXCIgW25nU3R5bGVdPVwieyAnd2lkdGgnOiB1cGxvYWRlci5wcm9ncmVzcyArICclJyB9XCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zdWNjZXNzIGJ0bi1zXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNsaWNrKT1cIm9uVXBsb2FkKClcIiBbZGlzYWJsZWRdPVwiIXVwbG9hZGVyLmdldE5vdFVwbG9hZGVkSXRlbXMoKS5sZW5ndGhcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tdXBsb2FkXCI+PC9zcGFuPiB7eyAndXBsb2FkJyB8IHRyYW5zbGF0ZSB8IGNhcGl0YWxpemUgfX0ge3sgJ2FsbCcgfCB0cmFuc2xhdGUgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXdhcm5pbmcgYnRuLXNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2xpY2spPVwib25DYW5jZWwoKVwiIFtkaXNhYmxlZF09XCIhdXBsb2FkZXIuaXNVcGxvYWRpbmdcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tYmFuLWNpcmNsZVwiPjwvc3Bhbj4ge3sgJ2NhbmNlbCcgfCB0cmFuc2xhdGUgfCBjYXBpdGFsaXplIH19IHt7ICdhbGwnIHwgdHJhbnNsYXRlIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgYnRuLXNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2xpY2spPVwib25SZW1vdmUoKVwiIFtkaXNhYmxlZF09XCIhdXBsb2FkZXIucXVldWUubGVuZ3RoXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRyYXNoXCI+PC9zcGFuPiB7eyAncmVtb3ZlJyB8IHRyYW5zbGF0ZSB8IGNhcGl0YWxpemUgfX0ge3sgJ2FsbCcgfCB0cmFuc2xhdGUgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gLFxyXG4gICAgcGlwZXM6IFtUcmFuc2xhdGVQaXBlLCBDYXBpdGFsaXplRmlyc3RMZXR0ZXJQaXBlXSxcclxuICAgIHByb3ZpZGVyczogW0F0dGFjaG1lbnRTZXJ2aWNlXSxcclxuICAgIGRpcmVjdGl2ZXM6IFtNT0RBTF9ESVJFQ1RJVkVTLCBDT1JFX0RJUkVDVElWRVMsIEZpbGVTZWxlY3REaXJlY3RpdmUsIEZpbGVEcm9wRGlyZWN0aXZlXSxcclxuICAgIHZpZXdQcm92aWRlcnM6IFtCU19WSUVXX1BST1ZJREVSU11cclxufSlcclxuZXhwb3J0IGNsYXNzIEF0dGFjaG1lbnRDb21wb25lbnQgIHtcclxuXHJcbiAgICBwdWJsaWMgdXBsb2FkZXI6RmlsZVVwbG9hZGVyID0gbmV3IEZpbGVVcGxvYWRlcih7dXJsOiBhdHRhY2htZW50VXBsb2FkVXJsLCBhdXRoVG9rZW46ICdCZWFyZXIgJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYWNjZXNzX3Rva2VuJyl9KTtcclxuICAgIHB1YmxpYyBoYXNEcm9wWm9uZU92ZXI6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHVibGljIGZpbGVPdmVyQmFzZShlOmFueSk6dm9pZCB7XHJcbiAgICAgICAgdGhpcy5oYXNEcm9wWm9uZU92ZXIgPSBlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXR0YWNobWVudHM6QXR0YWNobWVudFtdID0gW107XHJcbiAgICBwcml2YXRlIGRpc2FibGVkTG9nb0J0biA9IHRydWU7XHJcbiAgICBASW5wdXQoKSBwcml2YXRlIGVuYWJsZUxvZ29CdG46IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBAT3V0cHV0KCkgYXR0YWNobWVudENoYW5nZWQgOiBFdmVudEVtaXR0ZXI8QXR0YWNobWVudFtdPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIEBPdXRwdXQoKSBsb2dvQ2hhbmdlZCA6IEV2ZW50RW1pdHRlcjxTdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2F0dGFjaG1lbnRTZXJ2aWNlOkF0dGFjaG1lbnRTZXJ2aWNlKSB7XHJcbiAgICB9XHJcblxyXG4gICAgdHJhbnNmb3JtKGJ5dGVzKSB7XHJcbiAgICAgICAgaWYoYnl0ZXMgPT0gMCkgcmV0dXJuICcwIEJ5dGVzJztcclxuICAgICAgICB2YXIgayA9IDEwMDA7XHJcbiAgICAgICAgdmFyIHNpemVzID0gWydCeXRlcycsICdLQicsICdNQicsICdHQiddO1xyXG4gICAgICAgIHZhciBpID0gTWF0aC5mbG9vcihNYXRoLmxvZyhieXRlcykgLyBNYXRoLmxvZyhrKSk7XHJcbiAgICAgICAgcmV0dXJuIChieXRlcyAvIE1hdGgucG93KGssIGkpKS50b0ZpeGVkKDEpICsgJyAnICsgc2l6ZXNbaV07XHJcbiAgICB9XHJcblxyXG4gICAgb25VcGxvYWQoKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhcInVwbG9hZGluZy4uLlwiKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImxvZ29cIiwgdGhpcy5lbmFibGVMb2dvQnRuKTtcclxuICAgICAgICBsZXQgY291bnQ6IG51bWJlciA9IHRoaXMudXBsb2FkZXIucXVldWUubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMudXBsb2FkZXIudXBsb2FkQWxsKCk7XHJcbiAgICAgICAgdGhpcy5kaXNhYmxlZExvZ29CdG4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9hdHRhY2htZW50U2VydmljZS5maW5kTGFzdChjb3VudCkuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgICAoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdHRhY2htZW50cyA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImF0dGFjaG1lbnRzIFwiLCB0aGlzLmF0dGFjaG1lbnRzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNobWVudENoYW5nZWQuZW1pdCh0aGlzLmF0dGFjaG1lbnRzKTtcclxuICAgICAgICAgICAgfSwgKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgb25Mb2dvQ2hhbmdlZChmaWxlbmFtZTogU3RyaW5nKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhmaWxlVXBsb2FkUGF0aCArICBmaWxlbmFtZSApO1xyXG4gICAgICAgIHRoaXMubG9nb0NoYW5nZWQuZW1pdChmaWxlVXBsb2FkUGF0aCArICBmaWxlbmFtZSApO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2FuY2VsKCl7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJjYW5jZWxsaW5nXCIpO1xyXG4gICAgICAgIHRoaXMudXBsb2FkZXIuY2FuY2VsQWxsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25SZW1vdmUoKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhcInJlbW92aW5nXCIpO1xyXG4gICAgICAgIHRoaXMudXBsb2FkZXIuY2xlYXJRdWV1ZSgpXHJcbiAgICB9XHJcbn0iXX0=
